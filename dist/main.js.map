{"mappings":"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","sources":["src/lib/lint.js","src/lib/lint-expressions.js","src/lib/expressions/single-match.js","src/index.js"],"sourcesContent":["import { lintExpressions } from './lint-expressions';\n\nconst lint = style => {\n  let warnings = [];\n  warnings = warnings.concat(lintExpressions(style));\n  return warnings;\n};\n\nexport default lint;\n","import { lintSingleMatchExpressions } from './expressions/single-match';\n\nconst lintExpressions = style => {\n  let warnings = [];\n  warnings = warnings.concat(lintSingleMatchExpressions(style));\n  return warnings;\n};\n\nexport { lintExpressions };\n","import { createRecurseStyle } from 'mapbox-gl-style-recurse';\n\n/**\n * lintSingleMatchExpressions\n * Returns warnings for single match expressions in a Mapbox stylesheet\n * @param {Object} style - Mapbox stylesheet\n * @returns {Array} - warnings for singular match expressions\n */\nconst lintSingleMatchExpressions = style => {\n  let warnings = [];\n\n  // This function runs inside the style expressions to find single matches and populate the warnings array\n  const lintSingleMatch = (layerId, matchExp, key) => {\n    let inputs = [];\n    const outputs = [];\n    let inputOutputs = matchExp.slice(2);\n    const fallback = inputOutputs.pop();\n    inputOutputs.forEach((val, i) =>\n      i % 2 !== 0 ? outputs.push(val) : inputs.push(val)\n    );\n    outputs.push(fallback);\n    inputs = inputs.flat(1);\n\n    const isSingleInput = inputs.length === 1;\n    const isAppropriateOutputs =\n      outputs.length === 2 && outputs.includes(true) && outputs.includes(false);\n\n    if (isSingleInput && isAppropriateOutputs) {\n      warnings.push(\n        `${layerId}: ${key} contains single match expression ${JSON.stringify(\n          matchExp\n        )}`\n      );\n    }\n    // We return the existing match expression as-is because createRecurseStyle\n    // can also be used to transform a stylesheet, but we only want to use it to warn\n    return matchExp;\n  };\n\n  const isMatch = exp => !!(Array.isArray(exp) && exp[0] === 'match');\n\n  const lintSingleMatches = createRecurseStyle({\n    transformFn: lintSingleMatch,\n    transformCondition: isMatch\n  });\n\n  lintSingleMatches(style);\n  return warnings;\n};\n\nexport { lintSingleMatchExpressions };\n","import lint from './lib/lint';\n\nexport { lint };\n"],"names":["lint","style","warnings","concat","lintExpressions","lintSingleMatchExpressions","lintSingleMatch","layerId","matchExp","key","inputs","outputs","inputOutputs","slice","fallback","pop","forEach","val","i","push","flat","isSingleInput","length","isAppropriateOutputs","includes","JSON","stringify","isMatch","exp","Array","isArray","lintSingleMatches","transformFn","transformCondition"],"version":3,"file":"main.js.map"}