{"mappings":"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E;I,O,wC,C,G,C,I,sC,C,G,C,I,iD,C,G,C,I,wC,E,C;C;A,S,wC,G;I,M,I,S,C,sI,C,C;C;A,S,sC,C,I,E;I,I,O,M,K,W,I,I,C,M,C,Q,C,I,I,I,I,C,Y,C,I,I,E,O,K,C,I,C,I,C,C;C;A,S,wC,C,G,E;I,I,K,C,O,C,G,C,E,O,uC,C,G,C,C;C;A,S,oC,C,G,E,C,E;I,O,qC,C,G,C,I,2C,C,G,E,C,C,I,iD,C,G,E,C,C,I,sC,E,C;C;A,S,sC,G;I,M,I,S,C,2I,C,C;C;A,S,iD,C,C,E,M,E;I,I,C,C,E,O;I,I,O,C,K,Q,E,O,uC,C,C,E,M,C,C;I,I,C,G,M,C,S,C,Q,C,I,C,C,C,C,K,C,C,E,E,C,A;I,I,C,K,Q,I,C,C,W,E,C,G,C,C,W,C,I,C;I,I,C,K,K,I,C,K,K,E,O,K,C,I,C,C,C,C;I,I,C,K,W,I,2C,I,C,C,C,E,O,uC,C,C,E,M,C,C;C;A,S,uC,C,G,E,G,E;I,I,G,I,I,I,G,G,G,C,M,E,G,G,G,C,M,C;I,I,I,C,G,C,E,I,G,I,K,C,G,C,E,C,G,G,E,C,E,C,I,C,C,C,G,G,C,C,C,C;I,O,I,C;C;A,S,2C,C,G,E,C,E;I,I,E,G,G,I,I,G,I,G,O,M,K,W,I,G,C,M,C,Q,C,I,G,C,Y,C,A;I,I,E,I,I,E,O;I,I,I,G,E,A;I,I,E,G,I,A;I,I,E,G,K,A;I,I,E,E,E,A;I,I;Q,I,E,G,E,C,I,C,G,C,E,C,C,E,G,A,C,E,G,E,C,I,E,C,C,I,C,A,E,E,G,I,C;Y,I,C,I,C,E,C,K,C,C;Y,I,C,I,I,C,M,K,C,E,M;S;K,C,O,G,E;Q,E,G,I,C;Q,E,G,G,C;K,Q;Q,I;Y,I,C,E,I,E,C,Q,C,I,I,E,E,C,Q,C,E,C;S,Q;Y,I,E,E,M,E,C;S;K;I,O,I,C;C;A,S,qC,C,G,E;I,I,K,C,O,C,G,C,E,O,G,C;C;AC9CD,IAAQgC,kCAAR,GAAyBC,yCAAzB,CAAQD,YAAR,AAAA;AAEA,IAAME,gCAAU,GAAG,SAAbA,UAAa,CAAAR,GAAG,EAAI;IACxB,IAAI,CAACM,kCAAY,CAACN,GAAD,CAAjB,EAAwB,OAAO,KAAP,CAAxB;IAC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","sources":["src/lib/lint.js","src/lib/lint-expressions.js","src/lib/expressions/single-match.js","src/lib/expressions/duplicate-output.js","src/index.js"],"sourcesContent":["import { lintExpressions } from './lint-expressions';\n\nconst lint = style => {\n  let warnings = [];\n  warnings = warnings.concat(lintExpressions(style));\n  return warnings;\n};\n\nexport default lint;\n","import { lintSingleMatchExpressions } from './expressions/single-match';\nimport { lintExpressionDuplicateOutputs } from './expressions/duplicate-output';\n\nconst lintExpressions = style => {\n  let warnings = [];\n  warnings = warnings.concat(lintSingleMatchExpressions(style));\n  warnings = warnings.concat(lintExpressionDuplicateOutputs(style));\n  return warnings;\n};\n\nexport { lintExpressions };\n","import { createRecurseStyle } from 'mapbox-gl-style-recurse';\n\n/**\n * lintSingleMatchExpressions\n * Returns warnings for single match expressions in a Mapbox stylesheet\n * @param {Object} style - Mapbox stylesheet\n * @returns {Array} - warnings for singular match expressions\n */\nconst lintSingleMatchExpressions = style => {\n  let warnings = [];\n\n  // This function runs inside the style expressions to find single matches and populate the warnings array\n  const lintSingleMatch = (layerId, matchExp, key) => {\n    let inputs = [];\n    const outputs = [];\n    let inputOutputs = matchExp.slice(2);\n    const fallback = inputOutputs.pop();\n    inputOutputs.forEach((val, i) =>\n      i % 2 !== 0 ? outputs.push(val) : inputs.push(val)\n    );\n    outputs.push(fallback);\n    inputs = inputs.flat(1);\n\n    const isSingleInput = inputs.length === 1;\n    const isAppropriateOutputs =\n      outputs.length === 2 && outputs.includes(true) && outputs.includes(false);\n\n    if (isSingleInput && isAppropriateOutputs) {\n      warnings.push(\n        `${layerId}: ${key} contains single match expression ${JSON.stringify(\n          matchExp\n        )}`\n      );\n    }\n    // We return the existing match expression as-is because createRecurseStyle\n    // can also be used to transform a stylesheet, but we only want to use it to warn\n    return matchExp;\n  };\n\n  const isMatch = exp => !!(Array.isArray(exp) && exp[0] === 'match');\n\n  const lintSingleMatches = createRecurseStyle({\n    transformFn: lintSingleMatch,\n    transformCondition: isMatch\n  });\n\n  lintSingleMatches(style);\n  return warnings;\n};\n\nexport { lintSingleMatchExpressions };\n","import { createRecurseStyle } from 'mapbox-gl-style-recurse';\nimport { expression } from '@mapbox/mapbox-gl-style-spec';\nconst { isExpression } = expression;\n\nconst hasOutputs = exp => {\n  if (!isExpression(exp)) return false;\n  const expressionsWithOutputs = [\n    'interpolate',\n    'interpolate-hcl',\n    'interpolate-lab',\n    'step',\n    'match',\n    'case'\n  ];\n  const flatExpression = exp.flat(Infinity);\n  return flatExpression.some(item => expressionsWithOutputs.includes(item));\n};\n\n// Takes an array of indices and returns as an array of arrays containing the indices when they are in sequence\nexport const getSequentialIndexArrays = arr => {\n  if (!arr.every(item => typeof item === 'number')) {\n    console.error('Array is not made of index numbers');\n    return arr;\n  }\n  let next = [];\n\n  arr.forEach((index, i) => {\n    if (next.some(arr => arr.includes(index))) return;\n    let sequence = [];\n    let value = index;\n    let checkIndex = i;\n    do {\n      sequence.push(value);\n      checkIndex = checkIndex + 1;\n      value = arr[checkIndex];\n    } while (value === arr[checkIndex - 1] + 1);\n    next.push(sequence);\n  });\n\n  return next;\n};\n\nexport const getDuplicateOutputs = value => {\n  const expressionType = value[0];\n  let inputOutputs = [];\n  let outputs = [];\n\n  switch (expressionType) {\n    case 'interpolate':\n    case 'interpolate-hcl':\n    case 'interpolate-lab': {\n      inputOutputs = value.slice(3);\n      inputOutputs.forEach((val, i) => i % 2 !== 0 && outputs.push(val));\n      break;\n    }\n    case 'step': {\n      inputOutputs = value.slice(2);\n      inputOutputs.forEach((val, i) => i % 2 === 0 && outputs.push(val));\n      break;\n    }\n    case 'case': {\n      inputOutputs = value.slice(1);\n      const fallback = inputOutputs.pop();\n      inputOutputs.forEach((val, i) => i % 2 !== 0 && outputs.push(val));\n      outputs.push(fallback);\n      break;\n    }\n    case 'match': {\n      inputOutputs = value.slice(2);\n      const fallback = inputOutputs.pop();\n      inputOutputs.forEach((val, i) => i % 2 !== 0 && outputs.push(val));\n      outputs.push(fallback);\n      break;\n    }\n  }\n\n  const stringifiedOutputs = outputs.map(item => JSON.stringify(item));\n\n  const isScale = expressionType === 'interpolate' || expressionType === 'step';\n\n  let duplicateOutputs = new Set();\n\n  // Create arrays for all the indices outputs appear at\n  let outputIndexes = stringifiedOutputs.reduce((acc, o, i) => {\n    if (acc[o]) {\n      acc[o].push(i);\n    } else {\n      acc[o] = [i];\n    }\n    return acc;\n  }, {});\n\n  // Based on whether or not it is a scale expression, return whether we have invalid duplicates\n  // For scales, invalid duplicates include:\n  // - two identical outputs at the beginning of expression\n  // - two identical outputs at the end of expression\n  // - three identical outputs anywhere in an expression\n  // For conditionals, invalid duplicates include:\n  // - two identical outputs anywhere in the expression\n  Object.entries(outputIndexes).forEach(pair => {\n    const [k, v] = pair;\n\n    if (isScale) {\n      let sequences = getSequentialIndexArrays(v);\n      const firstIndex = 0;\n      const lastIndex = outputs.length - 1;\n      let beginning = sequences[0] || [];\n      let end = sequences[sequences.length - 1];\n      if (!beginning.includes(firstIndex)) beginning = [];\n      if (!end.includes(lastIndex)) end = [];\n\n      if (\n        beginning.length >= 2 ||\n        end.length >= 2 ||\n        sequences.some(arr => arr.length >= 3)\n      ) {\n        duplicateOutputs.add(k);\n      }\n    } else {\n      if (v.length > 1) duplicateOutputs.add(k);\n    }\n  });\n\n  duplicateOutputs = [...duplicateOutputs].map(d => JSON.parse(d));\n\n  const nestedOutputs = outputs.filter(o => hasOutputs(o));\n\n  if (nestedOutputs.length) {\n    const nestedDuplicates = nestedOutputs.reduce(\n      (acc, o) => acc.concat(getDuplicateOutputs(o)),\n      []\n    );\n    duplicateOutputs = duplicateOutputs.concat(nestedDuplicates);\n  }\n\n  return duplicateOutputs;\n};\n\n/**\n * lintExpressionDuplicateOutputs\n * Returns warnings for expressions with redundant outputs in a Mapbox stylesheet\n * @param {Object} style - Mapbox stylesheet\n * @returns {Array} - warnings for singular match expressions\n */\nconst lintExpressionDuplicateOutputs = style => {\n  let warnings = [];\n\n  // This function runs inside the style expressions to find single matches and populate the warnings array\n  const lintOutputs = (layerId, expression, key) => {\n    const duplicates = getDuplicateOutputs(expression).map(item =>\n      Array.isArray(item) ? JSON.stringify(item) : item\n    );\n    if (duplicates.length) {\n      warnings.push(\n        `${layerId}: ${key} contains duplicate outputs - ${duplicates.join(\n          ', '\n        )}`\n      );\n    }\n    return expression;\n  };\n\n  const lintDuplicateOutputs = createRecurseStyle({\n    transformFn: lintOutputs,\n    transformCondition: hasOutputs\n  });\n\n  lintDuplicateOutputs(style);\n  return warnings;\n};\n\nexport { lintExpressionDuplicateOutputs };\n","import lint from './lib/lint';\n\nexport { lint };\n"],"names":["lint","style","warnings","concat","lintExpressions","lintSingleMatchExpressions","lintSingleMatch","layerId","matchExp","key","inputs","outputs","inputOutputs","slice","fallback","pop","forEach","val","i","push","flat","isSingleInput","length","isAppropriateOutputs","includes","JSON","stringify","isMatch","exp","Array","isArray","lintSingleMatches","transformFn","transformCondition","isExpression","expression","hasOutputs","expressionsWithOutputs","flatExpression","Infinity","some","item","getSequentialIndexArrays","arr","every","console","error","next","index","sequence","value","checkIndex","getDuplicateOutputs","expressionType","stringifiedOutputs","map","isScale","duplicateOutputs","Set","outputIndexes","reduce","acc","o","Object","entries","pair","k","v","sequences","firstIndex","lastIndex","beginning","end","add","d","parse","nestedOutputs","filter","nestedDuplicates","lintExpressionDuplicateOutputs","lintOutputs","duplicates","join","lintDuplicateOutputs"],"version":3,"file":"main.js.map"}