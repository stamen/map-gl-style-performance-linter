{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A,Y,C;A,M,C,c,C,c,E,Y,E;I,K,E,I;C,C,C;A,c,C,S,C,G,K,C,C;;;AAEA,IAAMA,0BAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK,EAAI;IACpB,IAAIC,QAAQ,GAAG,EAAf,AAAA;IACAA,QAAQ,GAAGA,QAAQ,CAACC,MAAT,CAAgB,AAAA,CAAA,GAAA,sBAAA,CAAA,CAAgBF,KAAhB,CAAhB,CAAX,CAAAC;IACA,OAAOA,QAAP,CAAA;CAHF,AAIC;AAEcF,IAAAA,8BAAAA,GAAAA,0B,AAAAA;A,c,C,S,C,G,8B,C;;;;A,Y,C;A,M,C,c,C,c,E,Y,E;I,K,E,I;C,C,C;A,c,C,e,G,K,C,C;;;;;ACLf,IAAMI,qCAAe,GAAG,SAAlBA,eAAkB,CAAAH,KAAK,EAAI;IAC/B,IAAIC,QAAQ,GAAG,EAAf,AAAA;IACAA,QAAQ,GAAGA,QAAQ,CAACC,MAAT,CAAgB,AAAA,CAAA,GAAA,iCAAA,CAAA,CAA2BF,KAA3B,CAAhB,CAAX,CAAAC;IACAA,QAAQ,GAAGA,QAAQ,CAACC,MAAT,CAAgB,AAAA,CAAA,GAAA,qCAAA,CAAA,CAA+BF,KAA/B,CAAhB,CAAX,CAAAC;IACA,OAAOA,QAAP,CAAA;CAJF,AAKC;A,c,C,e,G,qC,C;;;;A,Y,C;A,M,C,c,C,c,E,Y,E;I,K,E,I;C,C,C;A,c,C,0B,G,K,C,C;;ACND;;;;;GAKA,CACA,IAAMG,gDAA0B,GAAG,SAA7BA,0BAA6B,CAAAJ,KAAK,EAAI;IAC1C,IAAIC,QAAQ,GAAG,EAAf,AAD0C,EAG1C,yGAFA;IAGA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAACC,OAAD,EAAUC,QAAV,EAAoBC,GAApB,EAA4B;QAClD,IAAIC,MAAM,GAAG,EAAb,AAAA;QACA,IAAMC,OAAO,GAAG,EAAhB,AAAA;QACA,IAAIC,YAAY,GAAGJ,QAAQ,CAACK,KAAT,CAAe,CAAf,CAAnB,AAAA;QACA,IAAMC,QAAQ,GAAGF,YAAY,CAACG,GAAb,EAAjB,AAAA;QACAH,YAAY,CAACI,OAAb,CAAqB,SAACC,GAAD,EAAMC,CAAN,EAArBN;YAAqB,OACnBM,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAcP,OAAO,CAACQ,IAAR,CAAaF,GAAb,CAAd,GAAkCP,MAAM,CAACS,IAAP,CAAYF,GAAZ,CADf,CAAA;SAArB,CAAqB,CAAA;QAGrBN,OAAO,CAACQ,IAAR,CAAaL,QAAb,CAAAH,CAAAA;QACAD,MAAM,GAAGA,MAAM,CAACU,IAAP,CAAY,CAAZ,CAAT,CAAAV;QAEA,IAAMW,aAAa,GAAGX,MAAM,CAACY,MAAP,KAAkB,CAAxC,AAAA;QACA,IAAMC,oBAAoB,GACxBZ,OAAO,CAACW,MAAR,KAAmB,CAAnB,IAAwBX,OAAO,CAACa,QAAR,CAAiB,IAAjB,CAAxB,IAAkDb,OAAO,CAACa,QAAR,CAAiB,KAAjB,CADpD,AAAA;QAGA,IAAIH,aAAa,IAAIE,oBAArB,EACErB,QAAQ,CAACiB,IAAT,CAAA,EAAA,CAAA,MAAA,CACKZ,OADL,EAAA,IAAA,CAAA,CAAA,MAAA,CACiBE,GADjB,EAAA,oCAAA,CAAA,CAAA,MAAA,CACyDgB,IAAI,CAACC,SAAL,CACrDlB,QADqD,CADzD,CAAAN,CAAAA,CAAAA;QAhBgD,CAsBlD,2EADC;QAED,iFAAA;QACA,OAAOM,QAAP,CAAA;KAxBF,AAyBC;IAED,IAAMmB,OAAO,GAAG,SAAVA,OAAU,CAAAC,GAAG,EAAnB;QAAmB,OAAI,CAAC,CAAEC,CAAAA,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAA,IAAsBA,GAAG,CAAC,CAAD,CAAH,KAAW,OAAnC,CAAA,AAAL,CAAA;KAAnB,AAAmB;IAEnB,IAAMG,iBAAiB,GAAG,AAAA,CAAA,GAAA,yBAAA,CAAA,CAAmB;QAC3CC,WAAW,EAAE1B,eAD8B;QAE3C2B,kBAAkB,EAAEN,OAApBM;KAFwB,CAA1B,AAA6C;IAK7CF,iBAAiB,CAAC9B,KAAD,CAAjB,CAAA8B;IACA,OAAO7B,QAAP,CAAA;CAvCF,AAwCC;A,c,C,0B,G,gD,C;;;;;A,Y,C;A,M,C,c,C,c,E,Y,E;I,K,E,I;C,C,C;A,c,C,8B,G,c,C,mB,G,K,C,C;;;A,S,gD,C,C,E,c,E;I,I,E,G,O,M,K,W,I,C,C,M,C,Q,C,I,C,C,Y,C,A;I,I,C,E,E;Q,I,K,C,O,C,C,C,I,C,E,G,iD,C,C,C,C,I,c,I,C,I,O,C,C,M,K,Q,E;Y,I,E,E,C,G,E,C;Y,I,C,G,C,A;Y,I,C,G,S,C,G,E,A;Y,O;gB,C,E,C;gB,C,E,S,C,G;oB,I,C,I,C,C,M,E,O;wB,I,E,I;qB,C;oB,O;wB,I,E,K;wB,K,E,C,C,C,E,C;qB,C;iB;gB,C,E,S,C,C,E,E;oB,M,E,C;iB;gB,C,E,C;a,C;S;Q,M,I,S,C,uI,C,C;K;I,I,gB,G,I,E,M,G,K,E,G,A;I,O;Q,C,E,S,C,G;Y,E,G,E,C,I,C,C,C,C;S;Q,C,E,S,C,G;Y,I,I,G,E,C,I,E,A;Y,gB,G,I,C,I,C;Y,O,I,C;S;Q,C,E,S,C,C,G,E;Y,M,G,I,C;Y,G,G,G,C;S;Q,C,E,S,C,G;Y,I;gB,I,C,gB,I,E,C,Q,C,I,I,E,E,C,Q,C,E,C;a,Q;gB,I,M,E,M,G,C;a;S;K,C;C;A,S,wC,C,G,E;I,O,wC,C,G,C,I,sC,C,G,C,I,iD,C,G,C,I,wC,E,C;C;A,S,wC,G;I,M,I,S,C,sI,C,C;C;A,S,iD,C,C,E,M,E;I,I,C,C,E,O;I,I,O,C,K,Q,E,O,uC,C,C,E,M,C,C;I,I,C,G,M,C,S,C,Q,C,I,C,C,C,C,K,C,C,E,E,C,A;I,I,C,K,Q,I,C,C,W,E,C,G,C,C,W,C,I,C;I,I,C,K,K,I,C,K,K,E,O,K,C,I,C,C,C,C;I,I,C,K,W,I,2C,I,C,C,C,E,O,uC,C,C,E,M,C,C;C;A,S,sC,C,I,E;I,I,O,M,K,W,I,I,C,M,C,Q,C,I,I,I,I,C,Y,C,I,I,E,O,K,C,I,C,I,C,C;C;A,S,wC,C,G,E;I,I,K,C,O,C,G,C,E,O,uC,C,G,C,C;C;A,S,uC,C,G,E,G,E;I,I,G,I,I,I,G,G,G,C,M,E,G,G,G,C,M,C;I,I,I,C,G,C,E,I,G,I,K,C,G,C,E,C,G,G,E,C,E,C,I,C,C,C,G,G,C,C,C,C;I,O,I,C;C;AC9CD,IAAQgC,kCAAR,GAAyBC,iBAAzB,CAAQD,YAAR,AAAA;AAEA,IAAME,gCAAU,GAAG,SAAbA,UAAa,CAAAR,G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AT,CAAA,EAAA,CAAA,MAAA,CACKZ,OADL,EAAA,IAAA,CAAA,CAAA,MAAA,CACiBE,GADjB,EAAA,gCAAA,CAAA,CAAA,MAAA,CACqDsD,UAAU,CAACC,IAAX,CACjD,IADiD,CADrD,CAAA9D,CAAAA,CAAAA;QAMF,OAAOiC,UAAP,CAAA;KAXF,AAYC;IAED,IAAM8B,oBAAoB,GAAG,AAAA,CAAA,GAAA,yBAAA,CAAA,CAAmB;QAC9CjC,WAAW,EAAE8B,WADiC;QAE9C7B,kBAAkB,EAAEG,gCAApBH;KAF2B,CAA7B,AAAgD;IAKhDgC,oBAAoB,CAAChE,KAAD,CAApB,CAAAgE;IACA,OAAO/D,QAAP,CAAA;CAxBF,AAyBC;A,c,C,8B,G,oD,C;;;;;;;A,Y,C;A,M,C,c,C,yB,E,Y,E;I,K,E,I;C,C,C;A,M,C,c,C,yB,E,M,E;I,U,E,I;I,G,E,S,G,G;Q,O,2B,C,S,C,C;K;C,C,C;;AC5GD,IAAA,2BAAA,GAAA,4CAAA,CAAA,wBAAA,CAAA,AAAA;A,S,4C,C,G,E;I,O,G,I,G,C,U,G,G,G;Q,S,E,G;K,C;C","sources":["src/lib/lint.js","src/lib/lint-expressions.js","src/lib/expressions/single-match.js","src/lib/expressions/duplicate-output.js","src/index.js"],"sourcesContent":["import { lintExpressions } from './lint-expressions';\n\nconst lint = style => {\n  let warnings = [];\n  warnings = warnings.concat(lintExpressions(style));\n  return warnings;\n};\n\nexport default lint;\n","import { lintSingleMatchExpressions } from './expressions/single-match';\nimport { lintExpressionDuplicateOutputs } from './expressions/duplicate-output';\n\nconst lintExpressions = style => {\n  let warnings = [];\n  warnings = warnings.concat(lintSingleMatchExpressions(style));\n  warnings = warnings.concat(lintExpressionDuplicateOutputs(style));\n  return warnings;\n};\n\nexport { lintExpressions };\n","import { createRecurseStyle } from 'mapbox-gl-style-recurse';\n\n/**\n * lintSingleMatchExpressions\n * Returns warnings for single match expressions in a Mapbox stylesheet\n * @param {Object} style - Mapbox stylesheet\n * @returns {Array} - warnings for singular match expressions\n */\nconst lintSingleMatchExpressions = style => {\n  let warnings = [];\n\n  // This function runs inside the style expressions to find single matches and populate the warnings array\n  const lintSingleMatch = (layerId, matchExp, key) => {\n    let inputs = [];\n    const outputs = [];\n    let inputOutputs = matchExp.slice(2);\n    const fallback = inputOutputs.pop();\n    inputOutputs.forEach((val, i) =>\n      i % 2 !== 0 ? outputs.push(val) : inputs.push(val)\n    );\n    outputs.push(fallback);\n    inputs = inputs.flat(1);\n\n    const isSingleInput = inputs.length === 1;\n    const isAppropriateOutputs =\n      outputs.length === 2 && outputs.includes(true) && outputs.includes(false);\n\n    if (isSingleInput && isAppropriateOutputs) {\n      warnings.push(\n        `${layerId}: ${key} contains single match expression ${JSON.stringify(\n          matchExp\n        )}`\n      );\n    }\n    // We return the existing match expression as-is because createRecurseStyle\n    // can also be used to transform a stylesheet, but we only want to use it to warn\n    return matchExp;\n  };\n\n  const isMatch = exp => !!(Array.isArray(exp) && exp[0] === 'match');\n\n  const lintSingleMatches = createRecurseStyle({\n    transformFn: lintSingleMatch,\n    transformCondition: isMatch\n  });\n\n  lintSingleMatches(style);\n  return warnings;\n};\n\nexport { lintSingleMatchExpressions };\n","import { createRecurseStyle } from 'mapbox-gl-style-recurse';\nimport { expression } from '@mapbox/mapbox-gl-style-spec';\nconst { isExpression } = expression;\n\nconst hasOutputs = exp => {\n  if (!isExpression(exp)) return false;\n  const expressionsWithOutputs = [\n    'interpolate',\n    'interpolate-hcl',\n    'interpolate-lab',\n    'step',\n    'match',\n    'case'\n  ];\n  const flatExpression = exp.flat(Infinity);\n  return flatExpression.some(item => expressionsWithOutputs.includes(item));\n};\n\nexport const getDuplicateOutputs = value => {\n  const expressionType = value[0];\n  let inputOutputs = [];\n  let outputs = [];\n\n  switch (expressionType) {\n    case 'interpolate':\n    case 'interpolate-hcl':\n    case 'interpolate-lab': {\n      inputOutputs = value.slice(3);\n      inputOutputs.forEach((val, i) => i % 2 !== 0 && outputs.push(val));\n      break;\n    }\n    case 'step': {\n      inputOutputs = value.slice(2);\n      inputOutputs.forEach((val, i) => i % 2 === 0 && outputs.push(val));\n      break;\n    }\n    case 'case': {\n      inputOutputs = value.slice(1);\n      const fallback = inputOutputs.pop();\n      inputOutputs.forEach((val, i) => i % 2 !== 0 && outputs.push(val));\n      outputs.push(fallback);\n      break;\n    }\n    case 'match': {\n      inputOutputs = value.slice(2);\n      const fallback = inputOutputs.pop();\n      inputOutputs.forEach((val, i) => i % 2 !== 0 && outputs.push(val));\n      outputs.push(fallback);\n      break;\n    }\n  }\n\n  let stringifiedOutputs = outputs.map(item => JSON.stringify(item));\n  const dedupedOutputs = [...new Set(stringifiedOutputs)];\n\n  for (const output of dedupedOutputs) {\n    const index = stringifiedOutputs.findIndex(o => o === output);\n    stringifiedOutputs.splice(index, 1);\n  }\n\n  let duplicateOutputs = [...new Set(stringifiedOutputs)].map(o =>\n    JSON.parse(o)\n  );\n\n  const nestedOutputs = outputs.filter(o => hasOutputs(o));\n\n  if (nestedOutputs.length) {\n    const nestedDuplicates = nestedOutputs.reduce(\n      (acc, o) => acc.concat(getDuplicateOutputs(o)),\n      []\n    );\n    duplicateOutputs = duplicateOutputs.concat(nestedDuplicates);\n  }\n\n  return duplicateOutputs;\n};\n\n/**\n * lintExpressionDuplicateOutputs\n * Returns warnings for expressions with redundant outputs in a Mapbox stylesheet\n * @param {Object} style - Mapbox stylesheet\n * @returns {Array} - warnings for singular match expressions\n */\nconst lintExpressionDuplicateOutputs = style => {\n  let warnings = [];\n\n  // This function runs inside the style expressions to find single matches and populate the warnings array\n  const lintOutputs = (layerId, expression, key) => {\n    const duplicates = getDuplicateOutputs(expression).map(item =>\n      Array.isArray(item) ? JSON.stringify(item) : item\n    );\n    if (duplicates.length) {\n      warnings.push(\n        `${layerId}: ${key} contains duplicate outputs - ${duplicates.join(\n          ', '\n        )}`\n      );\n    }\n    return expression;\n  };\n\n  const lintDuplicateOutputs = createRecurseStyle({\n    transformFn: lintOutputs,\n    transformCondition: hasOutputs\n  });\n\n  lintDuplicateOutputs(style);\n  return warnings;\n};\n\nexport { lintExpressionDuplicateOutputs };\n","import lint from './lib/lint';\n\nexport { lint };\n"],"names":["lint","style","warnings","concat","lintExpressions","lintSingleMatchExpressions","lintSingleMatch","layerId","matchExp","key","inputs","outputs","inputOutputs","slice","fallback","pop","forEach","val","i","push","flat","isSingleInput","length","isAppropriateOutputs","includes","JSON","stringify","isMatch","exp","Array","isArray","lintSingleMatches","transformFn","transformCondition","isExpression","expression","hasOutputs","expressionsWithOutputs","flatExpression","Infinity","some","item","getDuplicateOutputs","value","expressionType","stringifiedOutputs","map","dedupedOutputs","Set","output","index","findIndex","o","splice","duplicateOutputs","parse","nestedOutputs","filter","nestedDuplicates","reduce","acc","lintExpressionDuplicateOutputs","lintOutputs","duplicates","join","lintDuplicateOutputs"],"version":3,"file":"module.js.map"}